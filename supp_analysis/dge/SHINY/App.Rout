
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(shiny)
> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr
> 
> options(shiny.maxRequestSize=200*1024^2, shiny.launch.browser = TRUE)
> # Define server logic
> server <- function(input, output) {
+   # Render drop down menu to select gene
+   observe({
+     output$gene1<-renderUI({
+       expTable <- input$file1
+       if(is.null(expTable)) return(NULL)
+       
+       expTable_data=read.table(expTable$datapath, header=TRUE,sep="\t", row.names = 1)
+       selectInput("gene1", "Select Gene", choices = rownames(expTable_data))
+       
+     })
+   })
+   
+   # Render drop down menu to select from several columns
+   observe({
+     output$cell_type<-renderUI({
+       gTable <- input$file2
+       if(is.null(gTable)) return(NULL)
+       
+       gTable_data=read.table(gTable$datapath, header=TRUE,sep="\t", row.names = 1)
+       selectInput("cell_type", "Select the class", choices = colnames(gTable_data))
+       
+     })
+   })
+   
+   # Violin plot
+   observe({
+   output$vioPlot<-renderPlot({
+     expTable <- input$file1
+     gTable <- input$file2
+     gene <- input$gene1
+     cell_cl <- input$cell_type
+     
+     if(is.null(expTable)) return(NULL)
+     if(gene=="") return(NULL)
+     
+     if(is.null(gTable)){
+       expTable_data=read.table(expTable$datapath, header=TRUE,
+                                sep="\t", row.names = 1)
+       plot_data=data.frame("Category" = rep("All Subjects", ncol(expTable_data)),
+                            "Expression" = as.numeric(expTable_data[gene,]))
+     } else{
+       expTable_data=read.table(expTable$datapath, header=TRUE,
+                                sep="\t", row.names = 1)
+       gTable_data=read.table(gTable$datapath, header=TRUE,
+                              sep="\t", row.names = 1)
+       
+       plot_data=data.frame("Category" = gTable_data[colnames(expTable_data),cell_cl],
+                            "Expression" = as.numeric(expTable_data[gene,]))
+       
+     }
+ 
+     tocompare <- list( c("Type1", "Type2"))
+     vPlot=ggviolin(plot_data, x = "Category", y = "Expression", fill = "Category",
+       palette = c("#E69F00", "#56B4E9"),
+       add = "boxplot", add.params = list(fill = "white"))+
+       theme_classic() +
+       theme(legend.position="none",plot.title = element_text(lineheight=.8, face="bold"))+ 
+       scale_x_discrete(labels=c("Type1" = "Ep", "Type2" = "Tamm"))+
+       stat_compare_means(comparisons = tocompare, label = "p.signif")+
+       stat_compare_means(method = "t.test",label.y = max(plot_data$Expression)*1.1,size = 6)+
+       xlab("")+
+       ylab("Adjusted Expression")+
+       theme(axis.text.x=element_text(size=14,face="bold",angle = 45, hjust = 1))+
+       theme(axis.text.y=element_text(size=14,face="bold"),axis.title.y=element_text(size=16,face="bold"))
+ 
+     return(vPlot)
+     
+   })
+   })
+   
+   
+   # Box plot
+   observe({
+     output$boxPlot<-renderPlot({
+       expTable <- input$file1
+       gTable <- input$file2
+       gene <- input$gene1
+       cell_cl <- input$cell_type
+       
+       if(is.null(expTable)) return(NULL)
+       if(gene=="") return(NULL)
+       
+       if(is.null(gTable)){
+         expTable_data=read.table(expTable$datapath, header=TRUE,
+                                  sep="\t", row.names = 1)
+         plot_data=data.frame("Category" = rep("All Subjects", ncol(expTable_data)),
+                              "Expression" = as.numeric(expTable_data[gene,]))
+       } else{
+         expTable_data=read.table(expTable$datapath, header=TRUE,
+                                  sep="\t", row.names = 1)
+         gTable_data=read.table(gTable$datapath, header=TRUE,
+                                sep="\t", row.names = 1)
+         
+         plot_data=data.frame("Category" = gTable_data[colnames(expTable_data),cell_cl],
+                              "Expression" = as.numeric(expTable_data[gene,]))
+         
+       }
+   
+       tocompare <- list( c("Type1", "Type2"))
+       bPlot=ggboxplot(plot_data, "Category", "Expression",
+       color = "Category", palette =c("#E69F00", "#56B4E9"),
+       add = "jitter", shape = "Category",notch = FALSE)+
+       theme_classic() +
+       theme(legend.position="none",plot.title = element_text(lineheight=.8, face="bold"))+ 
+       scale_x_discrete(labels=c("Type1" = "Ep", "Type2" = "Tamm"))+
+       stat_compare_means(comparisons = tocompare, label = "p.signif")+
+       stat_compare_means(method = "t.test",label.y = max(plot_data$Expression)*1.1,size = 6)+
+       xlab("")+
+       ylab("Adjusted Expression")+
+       theme(axis.text.x=element_text(size=14,face="bold",angle = 45, hjust = 1))+
+       theme(axis.text.y=element_text(size=14,face="bold"),axis.title.y=element_text(size=16,face="bold"))
+ 
+       return(bPlot)
+       
+     })
+   })
+   
+ }
> 
> # UI
> library(shiny)
> 
> # Define UI for application
> ui <- fluidPage(
+   
+   # Application title
+   titlePanel(h1("WS DGE")),
+   
+   # Sidebar with a slider input for the number of bins
+   sidebarLayout(
+     sidebarPanel(
+         # Expression Matrix
+         fileInput('file1', 'Choose Expression Table',
+                   accept=c('text/csv', 
+                            'text/comma-separated-values,text/plain', 
+                            '.csv')),
+         
+         # Subgroups (optional)
+         fileInput('file2', 'Choose Subgroups Table',
+                   accept=c('text/csv', 
+                            'text/comma-separated-values,text/plain', 
+                            '.csv')),
+         
+         # Choosing which subgroup
+         uiOutput("cell_type"),
+         
+         # Gene name
+         textInput("gene1", 'Choose a Gene', value = "", 
+                   width = NULL, placeholder = "Input gene here"),
+         width = 3),
+ 
+     # Show plots and tables
+     mainPanel(
+       
+         tabsetPanel(
+         tabPanel("Violin Plot", plotOutput("vioPlot",width = "500px", height = "500px")), 
+         tabPanel("Boxplot", plotOutput("boxPlot",width = "500px", height = "500px"))
+       )
+     )
+   )
+ )
> 
> shinyApp(ui = ui, server = server)

Listening on http://127.0.0.1:3111
Warning: Removed 35 rows containing non-finite values (stat_ydensity).
Warning: Removed 35 rows containing non-finite values (stat_boxplot).
Warning: Removed 35 rows containing non-finite values (stat_signif).
Warning: Removed 35 rows containing non-finite values (stat_compare_means).
Warning: Removed 35 rows containing non-finite values (stat_ydensity).
Warning: Removed 35 rows containing non-finite values (stat_boxplot).
Warning: Removed 35 rows containing non-finite values (stat_signif).
Warning: Removed 35 rows containing non-finite values (stat_compare_means).
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Removed 35 rows containing non-finite values (stat_boxplot).
Warning: Removed 35 rows containing non-finite values (stat_signif).
Warning: Removed 35 rows containing non-finite values (stat_compare_means).
Warning in min(x) : no non-missing arguments to min; returning Inf
Warning in max(x) : no non-missing arguments to max; returning -Inf
Warning in min(diff(sort(x))) :
  no non-missing arguments to min; returning Inf
Warning in min(x) : no non-missing arguments to min; returning Inf
Warning in max(x) : no non-missing arguments to max; returning -Inf
Warning in stats::runif(length(x), -amount, amount) : NAs produced
Warning: Removed 35 rows containing missing values (geom_point).
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Removed 39 rows containing non-finite values (stat_ydensity).
Warning: Removed 39 rows containing non-finite values (stat_boxplot).
Warning: Removed 39 rows containing non-finite values (stat_signif).
Warning: Removed 39 rows containing non-finite values (stat_compare_means).
Warning: Removed 39 rows containing non-finite values (stat_ydensity).
Warning: Removed 39 rows containing non-finite values (stat_boxplot).
Warning: Removed 39 rows containing non-finite values (stat_signif).
Warning: Removed 39 rows containing non-finite values (stat_compare_means).
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
Warning: Computation failed in `stat_signif()`:
missing value where TRUE/FALSE needed
